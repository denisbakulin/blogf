from sqlalchemy.ext.asyncio import AsyncSessionfrom core.service import BaseServicefrom topic.model import Topic, TopicOfferfrom topic.repository import TopicRepository, TopicOfferRepositoryfrom topic.schemas import BaseTopic, AddTopicByOffer, CreateTopicfrom user.model import Userfrom post.utils import generate_slugclass TopicOfferService(BaseService[TopicOffer, TopicOfferRepository]):    def __init__(self, session: AsyncSession):        super().__init__(TopicOffer, session, TopicOfferRepository)    async def create_offer_topic(self, author: User, topic: BaseTopic) -> TopicOffer:        return await self.create_item(            author_id=author.id, status="pending", **topic.dict()        )class TopicService(BaseService[Topic, TopicRepository]):    def __init__(self, session: AsyncSession):        super().__init__(Topic, session, TopicRepository)        self.offer_service = TopicOfferService(session)    async def create_topic(self, topic: CreateTopic) -> Topic:        await self.check_already_exists(slug=topic.slug)        return await self.create_item(**topic.dict())    async def create_topic_from_offer(            self,            topic: TopicOffer,            process: AddTopicByOffer,    ) -> Topic | TopicOffer:        await self.check_already_exists(slug=process.slug)        slug = generate_slug(process.slug)        if process.status == "approve":            title = process.title or topic.title            description = process.description or topic.description            new_topic = await self.create_item(                title=title,                description=description,                slug=slug            )            return new_topic        return await self.offer_service.update_item(            topic,            status=process.status        )