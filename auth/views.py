from fastapi import (APIRouter, BackgroundTasks, Cookie, Depends,
                     HTTPException, Response)

from auth.deps import get_auth_service
from auth.exceptions import InvalidTokenError
from auth.schemas import (AccessTokenResponse, AuthCreds)
from auth.service import AuthService
from auth.utils import (TokenCreator, TokenTypes, decode_token,
                        set_refresh_token_cookie)
from mail.utils import EmailSender
from user.schemas import UserCreate

auth_router = APIRouter(prefix="/auth", tags=["üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"])


@auth_router.post(
    "/register",
    summary="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ",
    response_model=AccessTokenResponse

)
async def register_user(
        user_info: UserCreate,
        background_tasks: BackgroundTasks,
        auth_service: AuthService = Depends(get_auth_service),

):
    pending_access_token, verify_token = await auth_service.register(user_info)

    background_tasks.add_task(
        EmailSender(user_info.email, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã").verify_email,
        token=verify_token,
        username=user_info.username,
    )

    return AccessTokenResponse(access_token=pending_access_token)



@auth_router.post(
    "/login",
    summary="–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
    response_model=AccessTokenResponse,

)
async def login_user(
        response: Response,
        creds: AuthCreds,
        auth_service: AuthService = Depends(get_auth_service)
):

    tokens = await auth_service.login(creds)
    set_refresh_token_cookie(response, tokens.refresh_token)
    return AccessTokenResponse(access_token=tokens.access_token)



@auth_router.post(
    "/logout",
    summary="–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
)
async def logout(response: Response):
    response.delete_cookie("refresh_token", path="/", secure=True)



@auth_router.post(
    "/refresh",
    summary="–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"
)
async def refresh_user_token(refresh_token: str = Cookie(None)):

    if not refresh_token:
        raise HTTPException(401, "No refresh token")

    decoded_token = decode_token(token=refresh_token)

    if decoded_token.type != TokenTypes.refresh:
        raise InvalidTokenError("–¢–∏–ø —Ç–æ–∫–µ–Ω–∞ –Ω–µ access")

    access_token = TokenCreator(user_id=decoded_token.user_id).access

    return AccessTokenResponse(access_token=access_token)




@auth_router.get(
    "/verify-by-email",
    summary="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ",
    response_model=AccessTokenResponse,

)
async def verify_by_email(
        token: str,
        response: Response,
        auth_service: AuthService = Depends(get_auth_service)
):

    tokens = await auth_service.verify_user_by_email(token)
    set_refresh_token_cookie(response, tokens.refresh_token)

    return AccessTokenResponse(access_token=tokens.access_token)




@auth_router.get(
    "/change-email",
    summary="–°–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ",
    response_model=AccessTokenResponse,

)
async def change_email_by_token(
        token: str,
        response: Response,
        auth_service: AuthService = Depends(get_auth_service)
):
    tokens = await auth_service.verify_new_user_email(token)
    set_refresh_token_cookie(response, tokens.refresh_token)

    return AccessTokenResponse(access_token=tokens.access_token)

